UDF
自定义函数
UDAD

UDF
------------
用户自定义函数(user defined function)
	针对单条记录
创建函数
	自定义一个java类
	继承UDF类
	重写evaluate方法
	打jar包
	hive执行add jar
	hive执行创建模板函数
	hql中使用
package com.study.udf;
public class udftest extends UDF {
	public boolean evaluate(Text t1, Text t2) {
		if (t1 == null || t2 == null) {
			return false;
		}
		double d1 = Double.parseDouble(t1.toString());
		double d2 = Double.parseDouble(t2.toString());
		if(d1>d2){
			return true;
		}
		else{
			return false;
		}
	}
}
hive> add jar /opt/app/jar/hiveudf.jar;
create temporary function bigthan as 'com.study.udf.udftest';
hive> select * from m;
A	1
C	5
B	2
C	3
hive> desc m;
col1                	string
col2                	int
select col1,col2,bigthan(col2,3) from m;
A	1	false
C	5	true
B	2	false
C	3	false
udf,map针对文件每条记录
data-->map()-->file

UDAF
-------------------
UDAF用户自定义聚合函数user defined aggregation function,针对记录集合
开发通用UDAF有两个步骤
	第一个是编写resolver类,resolver负责类检查,操作符重载
	第二个是编写evaluator类,evaluator真正实现udaf的罗姐
通常来说,顶层UDAF类继承org.apache.hadoop.hive.ql.udf.GenericUDADResolver2,里面编写嵌套类evaluator实现UDAF的逻辑

一,实现resolver
	resolver通常继承org.apache.hadoop.hive.ql.udf.GenericUDADResolver2,但是更建议继承AbstractGenericUDAFResolver,隔离将来hive接口的变化,GenericUDADResolver和GenericUDAFResolver2接口的区别是,后面允许evaluator实现可以访问更多的信息,例如DISTINCT限定符,通配符FUNCTION(*)
二,实现evaluator
	所有evaluators必须继承抽象类oag.apache.hadoop.hive.ql.udf.generic.GenericUDAFEvaluator,子类必须实现它的一些抽象方法,实现UDAD的逻辑

Mode //这个类比较重要,它表示了udaf在mapreduce的各个阶段,理解Mode的含义,就可以理解hive的UDAD的运行流程

public static enum Mode{
PARTIAL1,	//这个是mapreduce的map阶段:从原始数据到部分数据聚合,将会调用iterate()和terminatePartital()

PARTIAL2,	//这个是mapreduce的map端的Combiner阶段,负责在map端合并map的数据,从部分数据聚合到部分数据聚合,将会调用merge()和terminatePartial()

FINAL,		//mapreude的reduce阶段:从部分数据的聚合到完全聚合,将会调用merge()和terminate()
COMPLETE	//如果出现了这个阶段,表示mapreduce只有map,没有reduce,所以map端就直接出结果了,从原始数据直接到完全聚合,将会调用iterate()和terminate()
};
